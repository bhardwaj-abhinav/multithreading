/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
//it is daemon thread so we ned to use compatibleFuture.get()

import java.util.concurrent.*;
import java.util.*;
public class Main
{
	public static void main(String[] args) throws Exception {
	
	    CompletableFuture<String> compatibleFuture = CompletableFuture.supplyAsync(() -> {
	        try{
	            Thread.sleep(1000);
	            System.out.println("Worker");
	        }catch(Exception e){}
	        return "Ok";
	    });
	    String s = null;
	    System.out.println(compatibleFuture.getNow("not ok"));
	    try{
	        s = compatibleFuture.get();
	    }catch(Exception e){}
	     System.out.println(s);
	    System.out.println("Main");
	    
	     CompletableFuture<String> f1 = CompletableFuture.supplyAsync(() -> {
	        try{
	            Thread.sleep(1000);
	            System.out.println("Worker1");
	        }catch(Exception e){}
	        return "Ok2";
	    });
	    
	     CompletableFuture<String> f2 = CompletableFuture.supplyAsync(() -> {
	        try{
	            Thread.sleep(1000);
	            System.out.println("Worker2");
	        }catch(Exception e){}
	        return "Ok3";
	    });
	    
	    CompletableFuture<Void> f = CompletableFuture.allOf(f1, f2);
	    f.join();
	    //f.get(); --- handle exception manaully
	    System.out.println("Main2");
	}
} 
